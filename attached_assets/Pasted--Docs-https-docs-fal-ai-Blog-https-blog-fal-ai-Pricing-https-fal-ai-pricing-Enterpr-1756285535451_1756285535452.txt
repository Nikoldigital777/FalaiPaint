[Docs](https://docs.fal.ai/) [Blog](https://blog.fal.ai/) [Pricing](https://fal.ai/pricing) [Enterprise](https://fal.ai/enterprise) [Careers](https://fal.ai/careers) [Research Grants](https://fal.ai/grants)

[Log-in](https://fal.ai/login?returnTo=/models/fal-ai/nano-banana/api) [Sign-up](https://fal.ai/login?returnTo=/models/fal-ai/nano-banana/api)

# Nano Banana Text to Image

fal-ai/nano-banana

Text to Image

Google's state-of-the-art image generation and editing model

Inference

Commercial use

[Schema](https://fal.ai/api/openapi/queue/openapi.json?endpoint_id=fal-ai/nano-banana)

[LLMs](https://fal.ai/models/fal-ai/nano-banana/llms.txt)

[Playground](https://fal.ai/models/fal-ai/nano-banana/playground) [API](https://fal.ai/models/fal-ai/nano-banana/api)

### Table of contents

Python

[**1\. Calling the API**](https://fal.ai/models/fal-ai/nano-banana/api#api-call)

- [Install the client](https://fal.ai/models/fal-ai/nano-banana/api#api-call-install)
- [Setup your API Key](https://fal.ai/models/fal-ai/nano-banana/api#api-call-setup)
- [Submit a request](https://fal.ai/models/fal-ai/nano-banana/api#api-call-submit-request)

[**2\. Authentication**](https://fal.ai/models/fal-ai/nano-banana/api#auth)

- [API Key](https://fal.ai/models/fal-ai/nano-banana/api#auth-api-key)

[**3\. Queue**](https://fal.ai/models/fal-ai/nano-banana/api#queue)

- [Submit a request](https://fal.ai/models/fal-ai/nano-banana/api#queue-submit)
- [Fetch request status](https://fal.ai/models/fal-ai/nano-banana/api#queue-status)
- [Get the result](https://fal.ai/models/fal-ai/nano-banana/api#queue-result)

[**4\. Files**](https://fal.ai/models/fal-ai/nano-banana/api#files)

- [Data URI (base64)](https://fal.ai/models/fal-ai/nano-banana/api#files-data-uri)
- [Hosted files (URL)](https://fal.ai/models/fal-ai/nano-banana/api#files-from-url)
- [Uploading files](https://fal.ai/models/fal-ai/nano-banana/api#files-upload)

[**5\. Schema**](https://fal.ai/models/fal-ai/nano-banana/api#schema)

- [Input](https://fal.ai/models/fal-ai/nano-banana/api#schema-input)
- [Output](https://fal.ai/models/fal-ai/nano-banana/api#schema-output)
- [Other](https://fal.ai/models/fal-ai/nano-banana/api#schema-other)

### About

Generate an image using Gemini

### 1\. Calling the API [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#api-call-install)

### Install the client [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#api-call-install)

The client provides a convenient way to interact with the model API.

```bg-transparent leading-normal whitespace-pre-wrap
pip install fal-client
```

### Setup your API Key [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#api-call-setup)

Set `FAL_KEY` as an environment variable in your runtime.

```bg-transparent leading-normal whitespace-pre-wrap
export FAL_KEY="YOUR_API_KEY"
```

### Submit a request [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#api-call-submit-request)

The client API handles the API submit protocol. It will handle the request status updates and return the result when the request is completed.

PythonPython (async)

```bg-transparent leading-normal whitespace-pre-wrap
import fal_client

def on_queue_update(update):
    if isinstance(update, fal_client.InProgress):
        for log in update.logs:
           print(log["message"])

result = fal_client.subscribe(
    "fal-ai/nano-banana",
    arguments={
        "prompt": "An action shot of a black lab swimming in an inground suburban swimming pool. The camera is placed meticulously on the water line, dividing the image in half, revealing both the dogs head above water holding a tennis ball in it's mouth, and it's paws paddling underwater."
    },
    with_logs=True,
    on_queue_update=on_queue_update,
)
print(result)
```

## 2\. Authentication [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#auth)

The API uses an API Key for authentication. It is recommended you set the `FAL_KEY` environment variable in your runtime when possible.

### API Key [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#auth-api-key)

##### Protect your API Key

When running code on the client-side (e.g. in a browser, mobile app or GUI applications), make sure to not expose your `FAL_KEY`. Instead, **use a server-side proxy** to make requests to the API. For more information, check out our [server-side integration guide](https://docs.fal.ai/model-endpoints/server-side).

## 3\. Queue [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#queue)

##### Long-running requests

For long-running requests, such as _training_ jobs or models with slower inference times, it is recommended to check the [Queue](https://docs.fal.ai/model-endpoints/queue) status and rely on [Webhooks](https://docs.fal.ai/model-endpoints/webhooks) instead of blocking while waiting for the result.

### Submit a request [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#queue-submit)

The client API provides a convenient way to submit requests to the model.

PythonPython (async)

```bg-transparent leading-normal whitespace-pre-wrap
import fal_client

handler = fal_client.submit(
    "fal-ai/nano-banana",
    arguments={
        "prompt": "An action shot of a black lab swimming in an inground suburban swimming pool. The camera is placed meticulously on the water line, dividing the image in half, revealing both the dogs head above water holding a tennis ball in it's mouth, and it's paws paddling underwater."
    },
    webhook_url="https://optional.webhook.url/for/results",
)

request_id = handler.request_id
```

### Fetch request status [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#queue-status)

You can fetch the status of a request to check if it is completed or still in progress.

PythonPython (async)

```bg-transparent leading-normal whitespace-pre-wrap
status = fal_client.status("fal-ai/nano-banana", request_id, with_logs=True)
```

### Get the result [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#queue-result)

Once the request is completed, you can fetch the result. See the [Output Schema](https://fal.ai/models/fal-ai/nano-banana/api?platform=python#schema-output) for the expected result format.

PythonPython (async)

```bg-transparent leading-normal whitespace-pre-wrap
result = fal_client.result("fal-ai/nano-banana", request_id)
```

## 4\. Files [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#files)

Some attributes in the API accept file URLs as input. Whenever that's the case you can pass your own URL or a Base64 data URI.

### Data URI (base64) [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#files-data-uri)

You can pass a Base64 data URI as a file input. The API will handle the file decoding for you. Keep in mind that for large files, this alternative although convenient can impact the request performance.

### Hosted files (URL) [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#files-from-url)

You can also pass your own URLs as long as they are publicly accessible. Be aware that some hosts might block cross-site requests, rate-limit, or consider the request as a bot.

### Uploading files [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#files-upload)

We provide a convenient file storage that allows you to upload files and use them in your requests. You can upload files using the client API and use the returned URL in your requests.

PythonPython (async)

```bg-transparent leading-normal whitespace-pre-wrap
url = fal_client.upload_file("path/to/file")
```

Read more about file handling in our [file upload guide](https://docs.fal.ai/model-endpoints#file-uploads).

## 5\. Schema [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#schema)

### Input [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#schema-input)

`prompt` `string`\\* required

The prompt for image generation

`num_images` `integer`

Number of images to generate Default value: `1`

```bg-transparent leading-normal whitespace-pre-wrap
{
  "prompt": "An action shot of a black lab swimming in an inground suburban swimming pool. The camera is placed meticulously on the water line, dividing the image in half, revealing both the dogs head above water holding a tennis ball in it's mouth, and it's paws paddling underwater.",
  "num_images": 1
}
```

### Output [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#schema-output)

`images` `list<Image>`\\* required

The generated images

`description` `string`\\* required

Text description or response from Gemini

```bg-transparent leading-normal whitespace-pre-wrap
{
  "images": [\
    {\
      "url": "https://storage.googleapis.com/falserverless/example_outputs/nano-banana-t2i-output.png"\
    }\
  ],
  "description": "Sure! Here is your image: "
}
```

### Other types [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#schema-other)

#### Image [\#](https://fal.ai/models/fal-ai/nano-banana/api?platform=python\#type-Image)

`url` `string`\\* required

The URL where the file can be downloaded from.

`content_type` `string`

The mime type of the file.

`file_name` `string`

The name of the file. It will be auto-generated if not provided.

`file_size` `integer`

The size of the file in bytes.

`width` `integer`

The width of the image in pixels.

`height` `integer`

The height of the image in pixels.

## Related Models